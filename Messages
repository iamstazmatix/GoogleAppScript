const WEBHOOK_URL = 'https://chat.googleapis.com/v1/spaces/AAAAhZJApxI/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=GBiWTg58f7cbS3EGvI9dZVqG2nsNgd7kKF0nkgKDbY8%3D';

function onEditInstallable(e) {
  const sheetName = 'Balloons';
  const watchColumn1 = 9; // Column I (A=1, B=2, C=3, ..., I=9)
  const watchColumn2 = 13; // Column M (A=1, B=2, C=3, ..., M=13)
  const watchColumnU = 21; // Column U
  const watchColumnY = 25; // Column Y (A=1, B=2, C=3, ..., Y=25)
  const watchColumnZ = 26; // Column Z (A=1, B=2, C=3, ..., Z=26)
  const watchColumnAA = 27; // Column AA
  const watchColumnAB = 28; // Column AB
  const watchColumnV = 22; // Column V (A=1, B=2, C=3, ..., V=22)
  const sheet = e.source.getSheetByName(sheetName);
  const checkbox = sheet.getRange("toggleBox");
  const anotherSheetUrl = 'https://docs.google.com/spreadsheets/d/1bgrmozh3WuuBt8NKObHb508WLhoBsxPNavNH9Lujaro/edit#gid=734542200';

  
  if (!checkbox.isChecked()) {
    return;
  }

if (e.range.getColumn() === watchColumn1 && e.source.getSheetName() === sheetName && !e.oldValue) {
    const row = e.range.getRow();
    const workOrder = sheet.getRange(row, 3).getValue(); // Column C
    const customer = sheet.getRange(row, 2).getValue(); // Column B
    const description = sheet.getRange(row, 6).getValue(); // Column F
    
    const dataSheet = e.source.getSheetByName('Data');
    const materialHandlerName = dataSheet.getRange('C4').getValue();
    
    const [firstName, lastName] = materialHandlerName.split(' ');
    const materialHandlerEmail = `${firstName}.${lastName}@confluentmedical.com`;
    
    const threadId = sendChatMessage(workOrder, customer, description, materialHandlerName, materialHandlerEmail);

    sheet.getRange(row, 1).setValue(threadId);
  }

if (e.range.getColumn() === watchColumn2 && e.source.getSheetName() === sheetName && !e.oldValue) {
    const row = e.range.getRow();
    const threadId = sheet.getRange(row, 1).getValue();
    const workOrder = sheet.getRange(row, 3).getValue(); // Column C
    const customer = sheet.getRange(row, 2).getValue(); // Column B
    const description = sheet.getRange(row, 6).getValue(); // Column F

    const technicianName = sheet.getRange(row, 24).getValue(); // Column X
    const engineerName = sheet.getRange(row, 23).getValue(); // Column W

    const [techFirstName, techLastName] = technicianName.split(' ');
    const technicianEmail = `${techFirstName}.${techLastName}@confluentmedical.com`;

    const [engFirstName, engLastName] = engineerName.split(' ');
    const engineerEmail = `${engFirstName}.${engLastName}@confluentmedical.com`;

    const replyText = `*Update:* Work Order ${workOrder} (${customer} ${description}) has been kitted and delivered and is ready for set up. Please update the schedule when beginning set up. @${technicianEmail} @${engineerEmail}`;

    sendReply(threadId, replyText, e.source.getId(), sheetName, row);
  }

if (e.range.getColumn() === watchColumnY && e.source.getSheetName() === sheetName && !e.oldValue) {
    const row = e.range.getRow();
    const threadId = sheet.getRange(row, 1).getValue();
    const workOrder = sheet.getRange
    (row, 3).getValue(); // Column C
    const customer = sheet.getRange(row, 2).getValue(); // Column B
    const description = sheet.getRange(row, 6).getValue(); // Column F

    const replyText = `*Update:* Work Order ${workOrder} (${customer} ${description}) has begun the set up process.`;

    sendReply(threadId, replyText, e.source.getId(), sheetName, row);
  }

if (e.range.getColumn() === watchColumnZ && e.source.getSheetName() === sheetName && !e.oldValue) {
    const row = e.range.getRow();
    const threadId = sheet.getRange(row, 1).getValue();
    const workOrder = sheet.getRange(row, 3).getValue(); // Column C
    const customer = sheet.getRange(row, 2).getValue(); // Column B
    const description = sheet.getRange(row, 6).getValue(); // Column F

    const dataSheet = e.source.getSheetByName('Data');
    const leadName = dataSheet.getRange('C3').getValue();

    const [leadFirstName, leadLastName] = leadName.split(' ');
    const leadEmail = `${leadFirstName}.${leadLastName}@confluentmedical.com`;

    const replyText = `*Update:* Work Order ${workOrder} (${customer} ${description}) has completed set up. Please verify Pre-Qualification Report before running. @${leadEmail}`;

    sendReply(threadId, replyText, e.source.getId(), sheetName, row);
  }

if (e.range.getColumn() === watchColumnU && e.source.getSheetName() === sheetName && !e.oldValue) {
  const row = e.range.getRow();
  const workOrder = sheet.getRange(row, 3).getValue(); // Column C
  const customer = sheet.getRange(row, 2).getValue(); // Column B
  const description = sheet.getRange(row, 6).getValue(); // Column F
  const threadId = sheet.getRange(row, 1).getValue();

  const dataSheet = e.source.getSheetByName('Data');
  const leadName = dataSheet.getRange('C3').getValue();
  const [leadFirstName, leadLastName] = leadName.split(' ');
  const leadEmail = `${leadFirstName}.${leadLastName}@confluentmedical.com`;

  const technicianName = sheet.getRange(row, 24).getValue(); // Column X
  const engineerName = sheet.getRange(row, 23).getValue(); // Column W

  const [techFirstName, techLastName] = technicianName.split(' ');
  const technicianEmail = `${techFirstName}.${techLastName}@confluentmedical.com`;

  const [engFirstName, engLastName] = engineerName.split(' ');
  const engineerEmail = `${engFirstName}.${engLastName}@confluentmedical.com`;

  sendReply(threadId, `*Update:* Work Order ${workOrder} (${customer} ${description}) is ready for final review. @${leadEmail} (Note: If the Lead is absent, please notify supervisor for completion.)`, technicianEmail, engineerEmail, e.source.getId(), sheetName, row);

  const data = {
  "thread": {
    "name": threadId
  },
  "cards": [
    {
      "sections": [
        {
          "header": "<font color='black'><b>Lead (Supervisor) Tasks</b>",
          "widgets": [
            {
              "textParagraph": {
                "text": "<u>1. Review LHR</u>\n   a. Verify all fields are filled out with the proper revision\n   b. Ensure any empty fields are appropriately marked with N/A\n   c. Verify proper Good Documentation Practices.\n   d. Sign and Date if necessary"
                }
            },
            {
              "textParagraph": {
                "text": "<u>2. Review Balloon Anneal Log (FM-147)</u>\n   a. Confirm Header Information Matches Work Order.\n        • Lot Number\n        • Balloon Part Number\n        • Revision\n        • Job Quantity\n        • Balloon Size\n        • BFM#\n   b. Review Each Line to Verify Information Recorded Accurately:\n        • Oven Asset - Confirm # was recorded & calibrated.\n        • Date\n        • Timer Asset - Confirm # was recorded & calibrated.\n        • Time In - Must have AM/PM\n        • Duration Time - Verify Duration Time with Balloon Drawing\n        • Time Out - Must be Time In + Duration Time and have AM/PM\n        • QTY\n        • Oven Temp - Verify Oven Temp with Balloon Drawing\n        • Initials - Verify Line Clearance (FM-055) matches operators on date."
                }
            },
            {
              "textParagraph": {
                "text": "<u>3. Review Inspection Sheet (FM-022)</u>\n   a. Confirm Header Information Matches Work Order.\n        • Lot Number\n        • Balloon Part Number\n        • Revision\n        • Job Quantity\n        • Customer\n        • Balloon Size\n        • BFM#\n        • Cell # (Should be N/A)\n        • Interval QTY (Should Match Machine Tag, verify with IP-180)\n   b. Review Each Line of the Inspection Sheet\n        • Confirm the Math in Each Column is Accurate\n          - Total Fail (Sum of Row Rejects - MB)\n          - Run Total Fail (Current Row Total Fail + Prev. Row Run Total Fail)\n          - Total Pass (Row Total Blown - Row Total Fail)\n          - Run Total Pass (Current Row Total Pass + Prev. Row Run Total Pass)\n       • Operator & Inspector Initials\n          - Confirm Line Clearance (FM-055) completed date entry was made.\n  c. Verify Inspection Totals match Anneal Record totals"
              }
            },
            {
              "textParagraph": {
                "text": "<u>4. Review Balloon In-Process Data Sheet FM-024</u>\n   a. Verify asset numbers and calibration status in “Test Equipment Record” fields.\n   b. Verify operator initials and date for every operator performing testing. (Can verify this when verifying Final Inspection Report print outs.)"
              }
            },
            {
              "textParagraph": {
                "text": "<u>5. Verify that PQ Report is present and has all signatures.</u>\n  a. Any writing follows Good Documentation Practices."
              }
            },
            {
              "textParagraph": {
                "text": "<u>6. Verify that final inspection report is present and has all signatures</u>\n  a. Any writing follows Good Documentation Practices."
              }
            },
            {
              "textParagraph": {
                "text": "<u>6. Verify that final inspection report is present and has all signatures</u>\n   a. Verify that any operator signing a printout has also signed FM-024.\n  b. Any writing follows Good Documentation Practices."
              }
            },
            {
              "textParagraph": {
                "text": "<u>7. Verify Pick List</u>\n  a. Follows Good Documentation Practices."
              }
            },
            {
              "textParagraph": {
                "text": "<u>8. Verify Work Order is present (OC Traveler report style)</u>\n  a. Any writing follows Good Documentation Practices."
              }
            },
            {
              "textParagraph": {
                "text": "<u>9. Verify Balloon Labels are correct and have necessary information.</u>\n  a. Lot Number.\n  b. Part Number.\n  c. Revision.\n  d. Customer Part Number.\n  e. Customer Revision\n  f. PO Number (Formatted PO#####)\n  g. SO Number.\n  h. Bag QTY\n        • Confirm bag was verified on FM-183. "
              }
            },
            {
              "textParagraph": {
                "text": "<u>10. Verify presence of correct sales order (if necessary)</u>\n  a. Sales Order matches SO listed on Traveler and Labels."
              }
            },
          ]
        },
        {
          "widgets": [
            {
              "textParagraph": {
                "text": `Once all tasks are completed, deliver the complete work order to QC and update Column V.`
              }
            },
          ]
        },

      ]
    }
  ]
};

  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(data)
  };

  UrlFetchApp.fetch(WEBHOOK_URL, options);
}
if (e.range.getColumn() === watchColumnV && e.source.getSheetName() === sheetName && !e.oldValue) {
  const row = e.range.getRow();
  const threadId = sheet.getRange(row, 1).getValue();
  const workOrder = sheet.getRange(row, 3).getValue(); // Column C
  const customer = sheet.getRange(row, 2).getValue(); // Column B
  const description = sheet.getRange(row, 6).getValue(); // Column F

  const dataSheet = e.source.getSheetByName('Data');
  const leadName = dataSheet.getRange('C3').getValue();

  const [leadFirstName, leadLastName] = leadName.split(' ');
  const leadEmail = `${leadFirstName}.${leadLastName}@confluentmedical.com`;

  const replyText = `*Update:* Work Order ${workOrder} (${customer} ${description}) has been reviewed and delivered to QC. `;

  sendReply(threadId, replyText, e.source.getId(), sheetName, row);

  // New functionality
const anotherSheet = SpreadsheetApp.openByUrl(anotherSheetUrl);
const targetSheet = anotherSheet.getSheetByName('Overall'); // Replace with the actual name of the sheet in another Google Sheet
const targetLastRow = targetSheet.getLastRow();

for (let i = 2; i <= targetLastRow; i++) {
  const targetWorkOrder = targetSheet.getRange(i, 2).getValue(); // Column B
  if (workOrder === targetWorkOrder) {
    targetSheet.getRange(i, 2).setValue(''); // Clear Column B
    targetSheet.getRange(i, 3).setValue(''); // Clear Column C
    targetSheet.getRange(i, 4).setValue(''); // Clear Column D
    targetSheet.getRange(i, 5).setValue(''); // Clear Column E
    targetSheet.getRange(i, 6).setValue('Open'); // Clear Column F

    const bfmNumber = targetSheet.getRange(i, 1).getValue(); // Column A
    const bfmSheet = anotherSheet.getSheetByName(bfmNumber);
    bfmSheet.getRange('A7:N1000').setValue('');
    bfmSheet.getRange('P7:AG1000').setValue('');
    bfmSheet.getRange('AI7:AI1000').setValue('');

    break;
  }
}

}

if (e.range.getColumn() === watchColumnAA && e.source.getSheetName() === sheetName && !e.oldValue) {
  const row = e.range.getRow();
  const threadId = sheet.getRange(row, 1).getValue();
  const workOrder = sheet.getRange(row, 3).getValue(); // Column C
  const customer = sheet.getRange(row, 2).getValue(); // Column B
  const description = sheet.getRange(row, 6).getValue(); // Column F

  const dataSheet = e.source.getSheetByName('Data');
  const leadName = dataSheet.getRange('C3').getValue();

  const [leadFirstName, leadLastName] = leadName.split(' ');
  const leadEmail = `${leadFirstName}.${leadLastName}@confluentmedical.com`;

  const replyText = `*Update:* Work Order ${workOrder} (${customer} ${description}) has passed the Pre-Qualification Report review. The work order is now running.`;

  sendReply(threadId, replyText, e.source.getId(), sheetName, row);
}

if (e.range.getColumn() === watchColumnAB && e.source.getSheetName() === sheetName && !e.oldValue) {
  const row = e.range.getRow();
  const qtyPassed = e.range.getValue();
  const qtyRequested = sheet.getRange(row, 7).getValue(); // Column G

  if (qtyPassed === qtyRequested) {
  const threadId = sheet.getRange(row, 1).getValue();
  const workOrder = sheet.getRange(row, 3).getValue(); // Column C
  const customer = sheet.getRange(row, 2).getValue(); // Column B
  const description = sheet.getRange(row, 6).getValue(); // Column F

  const technicianName = sheet.getRange(row, 24).getValue(); // Column X
  const engineerName = sheet.getRange(row, 23).getValue(); // Column W

  const [techFirstName, techLastName] = technicianName.split(' ');
  const technicianEmail = `${techFirstName}.${techLastName}@confluentmedical.com`;

  const [engFirstName, engLastName] = engineerName.split(' ');
  const engineerEmail = `${engFirstName}.${engLastName}@confluentmedical.com`;
      const currentDate = new Date().toLocaleDateString(); // Get current date in MM/DD/YYYY format

    // Set the value of Column AI to the current date
    sheet.getRange(row, 35).setValue(currentDate);

  sendReply(threadId, `*Update:* Work Order ${workOrder} (${customer} ${description}) has reached the final quantity.`, technicianEmail, engineerEmail, e.source.getId(), sheetName, row);

  const data = {
  "thread": {
    "name": threadId
  },
  "cards": [
    {
      "sections": [
        {
          "header": "Inspector Tasks",
          "widgets": [
            {
              "textParagraph": {
                "text": "1. Complete all pending in-process testing."
              }
            },
            {
              "textParagraph": {
                "text": "2. Bag and label any retainers, record on the inspection sheet."
              }
            },
            {
              "textParagraph": {
                "text": "3. Review all In-Process Inspection Data, print and sign final inspection report."
              }
            }
          ]
        },
        {
          "header": "Technician/Engineer Tasks",
          "widgets": [
            {
              "textParagraph": {
                "text": `@${technicianEmail} @${engineerEmail}`
              }
            },
            {
              "textParagraph": {
                "text": "1. Review Final Inspection Report and Sign."
              }
            },
            {
              "textParagraph": {
                "text": "2. Update \"Date Delivered to Inspection Rack\" in Schedule."
              }
            }
          ]
        },
        {
          "widgets": [
            {
              "textParagraph": {
                "text": "Once Complete: Place Work Order on the production rack assigned to this machine."
              }
            }
          ]
        }
      ]
    }
  ]
  };

  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(data)
  };

  UrlFetchApp.fetch(WEBHOOK_URL, options);
  }
}

function sendChatMessage(workOrder, customer, description, materialHandlerName, materialHandlerEmail) {
  const data = {
    "text": `*Update:* Work Order ${workOrder} (${customer} ${description}) has been printed and is ready for kitting. @${materialHandlerEmail}`
  };
  
  const options = {
    method: 'post',
    contentType: 'application/json',
    payload:
  JSON.stringify(data)
  };

  const response = UrlFetchApp.fetch(WEBHOOK_URL, options);
  const jsonResponse = JSON.parse(response.getContentText());
  return jsonResponse.thread.name;
}

function sendReply(threadId, replyText, sheetId, sheetName, row) {
  const triggerLink = `https://script.google.com/macros/s/1_q4LwpjZHQLoNVC3KvJdp5jklNfxL_vgx2mDyzJXBWuvhwabQsBL1Y7g/exec?sheetId=${sheetId}&sheetName=${sheetName}&row=${row}&column=25`;
  const data = {
    "text": `${replyText}`,
    "thread": {
      "name": threadId
    }
  };

  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(data)
  };

  UrlFetchApp.fetch(WEBHOOK_URL, options);
}

}
function onEdit(e) {
  const sheet = e.range.getSheet();
  const checkbox = sheet.getRange("toggleBox");
  
  if (e.range.getA1Notation() === "C1") {
    if (checkbox.isChecked()) {
      sheet.getRange("C1").setBackground("#00FF00"); // green
      ScriptApp.getProjectTriggers().forEach(function(trigger) {
        if (trigger.getHandlerFunction() === "onEditInstallable") {
          trigger.setEnabled(true);
        }
      });
    } else {
      sheet.getRange("C1").setBackground("#FF0000"); // red
      ScriptApp.getProjectTriggers().forEach(function(trigger) {
        if (trigger.getHandlerFunction() === "onEditInstallable") {
          trigger.setEnabled(false);
        }
      });
    }
  }
}

function onOpen() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Balloons');
  var checkboxCell = sheet.getRange('C1');
  checkboxCell.setValue(true);
}
